"use strict";

var forEach       = require("./for-each")
  , isPlainObject = require("./is-plain-object")
  , ensureValue   = require("./valid-value")
<<<<<<< HEAD
  , isArray       = Array.isArray;

var copyValue = function (value, ancestors, ancestorsCopy) {
	var mode;
	if (isPlainObject(value)) mode = "object";
	else if (isArray(value)) mode = "array";
	if (!mode) return value;

	var copy = ancestorsCopy[ancestors.indexOf(value)];
	if (copy) return copy;
	copy = mode === "object" ? {} : [];

	ancestors.push(value);
	ancestorsCopy.push(copy);
	if (mode === "object") {
		forEach(value, function (item, key) {
			copy[key] = copyValue(item, ancestors, ancestorsCopy);
		});
	} else {
		value.forEach(function (item, index) {
			copy[index] = copyValue(item, ancestors, ancestorsCopy);
		});
	}
	ancestors.pop();
	ancestorsCopy.pop();

	return copy;
};

module.exports = function (source) {
	return copyValue(ensureValue(source), [], []);
=======
  , isArray       = Array.isArray
  , copy
  , copyItem;

copyItem = function (value) {
	var index;
	if (!isPlainObject(value) && !isArray(value)) return value;
	index = this[0].indexOf(value);
	if (index === -1) return copy.call(this, value);
	return this[1][index];
};

copy = function (source) {
	var target = isArray(source) ? [] : {};
	this[0].push(source);
	this[1].push(target);
	if (isArray(source)) {
		source.forEach(function (value, key) {
			target[key] = copyItem.call(this, value, key);
		}, this);
	} else {
		forEach(
			source,
			function (value, key) {
				target[key] = copyItem.call(this, value, key);
			},
			this
		);
	}
	return target;
};

module.exports = function (source) {
	var obj = Object(ensureValue(source));
	if (obj !== source) return obj;
	return copy.call([[], []], obj);
>>>>>>> master
};
